{"version":3,"sources":["FXChart/FXChart.js","FXChart/FXSignals.js","FXChart/FXLatestPrice.js","App.js","serviceWorker.js","index.js"],"names":["FXChart","pair","useState","isLoaded","setIsLoaded","error","setError","series","setSeries","useEffect","tempOpen","tempPrice","tempClose","API","tempDate","tempRate","fetch","then","results","json","undefined","result","parseFloat","toFixed","push","date","price","fetchFXAPI","console","log","className","height","data","margin","top","right","left","id","x1","y1","x2","y2","offset","stopColor","length","stopOpacity","strokeDasharray","vertical","strokeOpacity","payload","content","active","split","hide","domain","tickCount","fillOpacity","width","style","fontStyle","fontWeight","fontSize","lineHeight","type","dataKey","stroke","strokeWidth","fill","FXSignals","summary","setSummary","fetchAPI","colorAction","action","includes","indicators","toUpperCase","count","Total_Buy","Total_Neutral","Total_Sell","CCI14","v","s","MACD12_26","ROC","STOCH9_6","STOCHRSI14","UltimateOscillator","WilliamsR","FXLatestPrice","latestPrices","setLatestPrices","setPair","tempData","map","fetchFXLatestPriceAPI","handleOnClick","event","currentTarget","textContent","symbol","change","chg_per","key","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"6UAmIeA,G,OAxHC,SAAC,GAAY,IAAXC,EAAU,EAAVA,KAAU,EACQC,oBAAS,GADjB,mBACjBC,EADiB,KACPC,EADO,OAEEF,mBAAS,MAFX,mBAEjBG,EAFiB,KAEVC,EAFU,OAGIJ,mBAAS,MAHb,mBAGjBK,EAHiB,KAGTC,EAHS,KA2CxBC,qBAAU,kBArCS,SAACR,GAChB,IACIS,EACAC,EACAC,EAHEC,EAAG,yDAAqDZ,EAArD,4EAILa,EAAW,GACXC,EAAW,GAEfX,GAAY,GACZI,EAAU,MACVF,EAAS,MAETU,MAAMH,GACLI,MAAK,SAAAC,GAAO,OAAIA,EAAQC,UACpBF,MACG,SAACC,GAEG,GADAd,GAAY,QACegB,IAAxBF,EAAO,SAA4BZ,EAAS,0DAC3C,CACA,IAAI,IAAIe,KAAUH,EAAO,SACrBR,EAAWQ,EAAO,SAAaG,GAApB,EACXT,EAAYM,EAAO,SAAaG,GAApB,EACZP,EAAWI,EAAO,SAAaG,GAApB,GACXV,IAAcW,WAAWZ,GAAYY,WAAWV,IAAY,GAAGW,QAAQ,GACvER,EAASS,KAAK,CACVC,KAAMX,EACNY,MAAOf,IAGfH,EAAUO,OAQdY,CAAW1B,KAAO,CAACA,IACnCQ,qBAAU,kBAAMmB,QAAQC,IAAItB,KAAS,CAACA,IAmBtC,OACI,yBAAKuB,UAAY,iBAEZzB,GAAS,yBAAKyB,UAAU,SAASzB,IAChCF,GAAY,yBAAK2B,UAAY,UAAjB,IAA2B,yBAAKA,UAAU,YAA1C,KACbvB,GAAU,yBAAKuB,UAAY,SACxB,0CAAS7B,EAAT,sBACA,kBAAC,IAAD,CAAqB8B,OAAQ,KACzB,kBAAC,IAAD,CACIC,KAAMzB,EACN0B,OAAQ,CAACC,IAAK,GAAIC,MAAO,EAAGC,KAAM,IAEtC,8BACI,oCAAgBC,GAAG,OAAOC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIC,GAAG,KAClD,0BAAMC,OAAO,KAAKC,UAAWpC,EAAOA,EAAOqC,OAAO,GAAKrC,EAAOA,EAAOqC,OAAO,GAAK,UAAY,UAAWC,YAAa,IACrH,0BAAMH,OAAO,MAAMC,UAAWpC,EAAOA,EAAOqC,OAAO,GAAKrC,EAAOA,EAAOqC,OAAO,GAAK,YAAc,YAAYC,YAAa,MAG7H,kBAAC,IAAD,CACIC,gBAAgB,KAChBC,UAAU,EACVC,cAAe,KAEnB,kBAAC,IAAD,CAASC,QAAS1C,EAAQ2C,QAxCpB,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,OAAQF,EAAc,EAAdA,QAC7B,GAAIE,GAAUF,EAAS,CACnB,IAAMxB,EAAOwB,EAAQ,GAAGA,QAAQxB,KAAK2B,MAAM,KAAK,GAAGA,MAAM,KACrD,OACI,yBAAKtB,UAAU,kBACf,uBAAGA,UAAU,eAAb,WAAmC,0BAAMA,UAAU,SAAUmB,EAAQ,GAAGA,QAAQvB,OAAhF,KACA,uBAAGI,UAAU,cAAb,UAA8BL,EAAK,GAAnC,YAAyCA,EAAK,GAA9C,YAAoDA,EAAK,MAKrE,OAAO,QA8BK,kBAAC,IAAD,CACI4B,MAAM,EACNC,OAAQ,CAAC,UAAW,QACpBC,UAAW,GAEXP,cAAe,EACfQ,YAAa,EAEbC,MAAO,GACPC,MAAO,CACPC,UAAW,SACXC,WAAY,MACZC,SAAU,OACVC,WAAY,SAGhB,kBAAC,IAAD,CAEIC,KAAK,WACLC,QAAQ,QACRC,OAAQ1D,EAAOA,EAAOqC,OAAO,GAAKrC,EAAOA,EAAOqC,OAAO,GAAK,UAAY,UACxEsB,YAAa,EACbV,YAAa,EACbW,KAAK,qBCjBdC,G,OArGG,SAAC,GAAY,IAAXnE,EAAU,EAAVA,KAAU,EACMC,oBAAS,GADf,mBACnBC,EADmB,KACTC,EADS,OAEIF,mBAAS,MAFb,mBAEnBmE,EAFmB,KAEVC,EAFU,OAGApE,mBAAS,MAHT,mBAGnBG,EAHmB,KAGZC,EAHY,KA4B1BG,qBAAU,kBArBO,SAACR,GACd,IAAMY,EAAG,4DAAwDZ,EAAxD,4EAETG,GAAY,GACZkE,EAAW,MACXhE,EAAS,MAETU,MAAMH,GACDI,MAAK,SAAAC,GAAO,OAAIA,EAAQC,UACxBF,MACG,SAACC,GACGd,GAAY,QACegB,IAAxBF,EAAO,SAA4BZ,EAAS,sDAE3CgE,EAAWpD,EAAO,UAEtBU,QAAQC,IAAIX,MAKZqD,CAxBD,6FAwBkB,CAACtE,IAElC,IAAMuE,EAAc,SAACC,GACjB,QAAgBrD,IAAXqD,EAED,OADA7C,QAAQC,IAAI4C,EAAOC,SAAS,OAAQD,GAChCA,EAAOC,SAAS,OAAe,MAC1BD,EAAOC,SAAS,QAAgB,OAC7B,WAIpB,OACI,yBAAK5C,UAAU,uBACVzB,GAAS,yBAAKyB,UAAU,SAASzB,IAChCF,GAAY,yBAAK2B,UAAY,UAAjB,IAA2B,yBAAKA,UAAU,YAA1C,KACbuC,GAAY,yBAAKvC,UAAY,cAC1B,yBAAKA,UAAU,UACX,yBAAKA,UAAY,QAAQ7B,GACzB,yBAAK6B,UAAS,kBAAc0C,EAAYH,EAAQM,WAAWN,WAAaA,EAAQM,WAAWN,QAAQO,eACnG,yBAAK9C,UAAU,SACX,yBAAKA,UAAU,OAAf,OAA0BuC,EAAQQ,MAAMC,WACxC,yBAAKhD,UAAU,WAAf,WAAkCuC,EAAQQ,MAAME,eAChD,yBAAKjD,UAAU,QAAf,QAA4BuC,EAAQQ,MAAMG,cAGlD,yBAAKlD,UAAU,4BACX,yBAAKA,UAAY,UACT,sCACA,uCACA,yCAER,yBAAKA,UAAU,uBACX,yBAAKA,UAAY,aACb,yBAAKA,UAAU,QAAf,YACA,yBAAKA,UAAU,SAASuC,EAAQM,WAAWM,MAAMC,GACjD,yBAAKpD,UAAS,iBAAY0C,EAAYH,EAAQM,WAAWM,MAAME,KAAOd,EAAQM,WAAWM,MAAME,IAEnG,yBAAKrD,UAAY,aACb,yBAAKA,UAAU,QAAf,iBACA,yBAAKA,UAAU,SAASuC,EAAQM,WAAWS,UAAUF,GACrD,yBAAKpD,UAAS,iBAAY0C,EAAYH,EAAQM,WAAWS,UAAUD,KAAOd,EAAQM,WAAWS,UAAUD,IAE3G,yBAAKrD,UAAY,aACb,yBAAKA,UAAU,QAAf,kBACA,yBAAKA,UAAU,SAASuC,EAAQM,WAAWU,IAAIH,GAC/C,yBAAKpD,UAAS,iBAAY0C,EAAYH,EAAQM,WAAWU,IAAIF,KAAOd,EAAQM,WAAWU,IAAIF,IAE/F,yBAAKrD,UAAY,aACb,yBAAKA,UAAU,QAAf,qBACA,yBAAKA,UAAU,SAASuC,EAAQM,WAAWW,SAASJ,GACpD,yBAAKpD,UAAS,iBAAY0C,EAAYH,EAAQM,WAAWW,SAASH,KAAOd,EAAQM,WAAWW,SAASH,IAEzG,yBAAKrD,UAAY,aACb,yBAAKA,UAAU,QAAf,uBACA,yBAAKA,UAAU,SAASuC,EAAQM,WAAWY,WAAWL,GACtD,yBAAKpD,UAAS,iBAAY0C,EAAYH,EAAQM,WAAWY,WAAWJ,KAAOd,EAAQM,WAAWY,WAAWJ,IAE7G,yBAAKrD,UAAY,aACb,yBAAKA,UAAU,QAAf,uBACA,yBAAKA,UAAU,SAASuC,EAAQM,WAAWa,mBAAmBN,GAC9D,yBAAKpD,UAAS,iBAAY0C,EAAYH,EAAQM,WAAWa,mBAAmBL,KAAOd,EAAQM,WAAWa,mBAAmBL,IAE7H,yBAAKrD,UAAY,aACb,yBAAKA,UAAU,QAAf,aACA,yBAAKA,UAAU,SAASuC,EAAQM,WAAWc,UAAUP,GACrD,yBAAKpD,UAAS,iBAAY0C,EAAYH,EAAQM,WAAWc,UAAUN,KAAOd,EAAQM,WAAWc,UAAUN,UC3BpHO,EAhEO,WAClB,IADwB,EAEgBxF,mBAAS,MAFzB,mBAEjByF,EAFiB,KAEHC,EAFG,OAGA1F,mBAAS,WAHT,mBAGjBD,EAHiB,KAGX4F,EAHW,KA0BxBpF,qBAAU,kBArBoB,WAC1B,IAAMI,EAAG,wDALE,0FAKF,kEACHiF,EAAW,GAEjBF,EAAgB,MAEhB5E,MAAMH,GACLI,MAAK,SAAAC,GAAO,OAAIA,EAAQC,UACxBF,MACG,SAACC,QACgCE,IAAxBF,EAAO,WACRA,EAAO,SAAa6E,KAAI,SAAA/D,GAAI,OAAI8D,EAAStE,KAAKQ,MAC9C4D,EAAgBE,OAGxB,SAACzF,GACGuB,QAAQC,IAAIxB,MAKR2F,KAAyB,IAEzC,IAAMC,EAAgB,SAACC,GACnBL,EAAQK,EAAMC,cAAcC,YAAYhD,MAAM,KAAK,KAGvD,OACI,yBAAKtB,UAAU,aAEV6D,GAAgB,yBAAK7D,UAAY,0BAC9B,yBAAKA,UAAY,UACb,wCACA,uCACA,yCAEJ,yBAAKA,UAAY,wBACZ6D,EAAaI,KAAI,gBAAE1D,EAAF,EAAEA,GAAGgE,EAAL,EAAKA,OAAO3E,EAAZ,EAAYA,MAAM4E,EAAlB,EAAkBA,OAAOC,EAAzB,EAAyBA,QAAzB,OACd,yBAAKzE,UAAS,sBAAmBuE,IAAWpG,EAAO,SAAW,IAAMuG,IAAKnE,EAAIoE,QAAWR,GACpF,yBAAKnE,UAAY,UAAjB,IAA4BuE,EAA5B,KACA,yBAAKvE,UAAY,SAAjB,IAA2BJ,EAA3B,KACA,yBAAKI,UAAY,UACb,yBAAKA,UAAawE,EAAO,EAAI,WAAa,YAA1C,IAAwDA,EAAxD,KACA,yBAAKxE,UAAawE,EAAO,EAAI,WAAa,YAA1C,IAAwDC,EAAxD,YAQpB,yBAAKlE,GAAG,SAASP,UAAY,0BACzB,kBAAC,EAAD,CAAW7B,KAAMA,IACjB,kBAAC,EAAD,CAASA,KAAMA,O,OC5ChByG,MAff,WACE,OACE,yBAAK5E,UAAU,OACb,sDACA,kBAAC,EAAD,MACA,gCACE,6hBCEY6E,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtG,MAAK,SAAAuG,GACJA,EAAaC,gBAEdC,OAAM,SAAArH,GACLuB,QAAQvB,MAAMA,EAAMsH,c","file":"static/js/main.43d4fa6a.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n// import Chart from 'react-apexcharts'\r\nimport { Area,\r\n    AreaChart, \r\n    CartesianGrid,\r\n    ResponsiveContainer, \r\n    Tooltip, \r\n    // XAxis, \r\n    YAxis } from 'recharts';\r\nimport '../sass/FXChart.scss'\r\n\r\nconst FXChart = ({pair}) => {\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [error, setError] = useState(null)\r\n    const [series, setSeries] = useState(null);\r\n\r\n\r\n    const fetchFXAPI = (pair) => {\r\n        const API = `https://fcsapi.com/api-v2/forex/history?symbol=${pair}&period=1d&access_key=32wsOaXpTRGNGkWDStdRRt0t6csigLrH5FV4qZjHe2cWljQy2E`\r\n        let tempOpen\r\n        let tempPrice\r\n        let tempClose\r\n        let tempDate = []\r\n        let tempRate = []\r\n\r\n        setIsLoaded(false)\r\n        setSeries(null)\r\n        setError(null)\r\n\r\n        fetch(API)\r\n        .then(results => results.json())\r\n            .then(\r\n                (results) => {\r\n                    setIsLoaded(true)\r\n                    if(results['response'] === undefined) setError('Access blocked. Restriction remove after 1 minute.')\r\n                    else{\r\n                        for(let result in results['response']) {\r\n                            tempOpen = results['response'][result]['o']\r\n                            tempClose = results['response'][result]['c']\r\n                            tempDate = results['response'][result]['tm']\r\n                            tempPrice = ((parseFloat(tempOpen) + parseFloat(tempClose))/2).toFixed(4)\r\n                            tempRate.push({\r\n                                date: tempDate,\r\n                                price: tempPrice\r\n                            })\r\n                        }\r\n                        setSeries(tempRate)\r\n                        // console.log(tempRate)\r\n                    }\r\n                })\r\n\r\n            \r\n    }\r\n\r\n    useEffect(() => fetchFXAPI(pair), [pair])\r\n    useEffect(() => console.log(series), [series])\r\n\r\n    const CustomTooltip = ({ active, payload }) => {\r\n        if (active && payload) {\r\n            const date = payload[0].payload.date.split(\" \")[0].split(\"-\")\r\n                return (\r\n                    <div className=\"custom-tooltip\">\r\n                    <p className=\"label-price\"> Price: <span className=\"price\" >{payload[0].payload.price}</span> </p>\r\n                    <p className=\"label-date\">{`${date[2]}/${date[1]}/${date[0]}`}</p>\r\n                    </div>\r\n                );\r\n        }\r\n      \r\n        return null;\r\n      };\r\n\r\n\r\n\r\n    \r\n    return(\r\n        <div className = 'chart-wrapper'>\r\n            \r\n            {error && <div className='error'>{error}</div>}\r\n            {!isLoaded && <div className = 'loader'> <div className='spinner'></div> </div>}\r\n            {series && <div className = 'chart'>\r\n                <h3> {`${pair} Daily Chart`}  </h3>\r\n                <ResponsiveContainer height={230}>\r\n                    <AreaChart\r\n                        data={series}\r\n                        margin={{top: 30, right: 5, left: 5}}\r\n                    >\r\n                    <defs>\r\n                        <linearGradient id=\"grad\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                        <stop offset=\"5%\" stopColor={series[series.length-1] > series[series.length-2] ? \"#00BAEC\" : \"#FF6347\"} stopOpacity={1} />\r\n                        <stop offset=\"95%\" stopColor={series[series.length-1] > series[series.length-2] ? \"#00BAEC00\" : \"#FF634700\"}stopOpacity={1} />\r\n                        </linearGradient>\r\n                    </defs>\r\n                    <CartesianGrid\r\n                        strokeDasharray=\"0 \"\r\n                        vertical={false}\r\n                        strokeOpacity={0.5}\r\n                    />\r\n                    <Tooltip payload={series} content={CustomTooltip} />\r\n                    <YAxis\r\n                        hide={false}\r\n                        domain={['dataMin', 'auto']}\r\n                        tickCount={21}\r\n                        // tickFormatter={formatXAxis}\r\n                        strokeOpacity={0}\r\n                        fillOpacity={1}\r\n                        // fill=\"rgb(0, 0, 0)\"\r\n                        width={40}\r\n                        style={{\r\n                        fontStyle: \"normal\",\r\n                        fontWeight: \"600\",\r\n                        fontSize: \"12px\",\r\n                        lineHeight: \"9px\",\r\n                        }}\r\n                    />\r\n                    <Area\r\n                        // isAnimationActive={false}\r\n                        type=\"monotone\"\r\n                        dataKey=\"price\"\r\n                        stroke={series[series.length-1] > series[series.length-2] ? \"#00BAEC\" : \"#FF6347\"}\r\n                        strokeWidth={2}\r\n                        fillOpacity={1}\r\n                        fill=\"url(#grad)\"\r\n                    >\r\n                    </Area>\r\n                    </AreaChart>\r\n                </ResponsiveContainer>\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FXChart","import React, {useEffect, useState} from 'react'\r\nimport '../sass/FXSignals.scss'\r\n\r\nconst FXSignals = ({pair}) => {\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [summary, setSummary] = useState(null)\r\n    const [error, setError] = useState(null)\r\n    const pairs = ('EUR/USD,AUD/NZD,EUR/GBP,AUD/CAD,CHF/JPY,USD/JPY,GBP/USD,AUD/USD,USD/CAD,USD/CHF,NZD/USD');\r\n\r\n\r\n    const fetchAPI = (pair) => {\r\n        const API = `https://fcsapi.com/api-v2/forex/indicators?symbol=${pair}&period=1d&access_key=32wsOaXpTRGNGkWDStdRRt0t6csigLrH5FV4qZjHe2cWljQy2E`\r\n        \r\n        setIsLoaded(false)\r\n        setSummary(null)\r\n        setError(null)\r\n\r\n        fetch(API)\r\n            .then(results => results.json())\r\n            .then(\r\n                (results) => {\r\n                    setIsLoaded(true);\r\n                    if(results['response'] === undefined) setError('Access blocked. Restriction remove after 1 minute.')\r\n                    else {\r\n                        setSummary(results['response'])\r\n                    }\r\n                    console.log(results)\r\n                }\r\n            )\r\n    }\r\n\r\n    useEffect(() => fetchAPI(pairs), [pair])\r\n\r\n    const colorAction = (action) => {\r\n        if(!(action === undefined)) {\r\n            console.log(action.includes('Buy'), action)\r\n            if (action.includes('Buy')) return 'buy'\r\n            else if (action.includes('Sell')) return 'sell'\r\n            else return 'neutral'\r\n        }   \r\n    }\r\n\r\n    return(\r\n        <div className='fx-signal-component'>\r\n            {error && <div className='error'>{error}</div>}\r\n            {!isLoaded && <div className = 'loader'> <div className='spinner'></div> </div>}\r\n            {summary &&  <div className = 'fx-signals'>\r\n                <div className='signal'>\r\n                    <div className = 'pair'>{pair}</div>\r\n                    <div className= {`summary ${colorAction(summary.indicators.summary)}`}>{summary.indicators.summary.toUpperCase()}</div>\r\n                    <div className='count'>\r\n                        <div className='buy'>Buy {summary.count.Total_Buy}</div>\r\n                        <div className='neutral'>Neutral {summary.count.Total_Neutral}</div>\r\n                        <div className='sell'>Sell {summary.count.Total_Sell}</div>\r\n                    </div>\r\n                </div>\r\n                <div className='indicator-header-wrapper'>\r\n                    <div className = 'Header'>\r\n                            <h3> Name </h3>\r\n                            <h3> Value </h3>\r\n                            <h3> Action </h3>\r\n                    </div>\r\n                    <div className='indicator-container'>\r\n                        <div className = 'indicator'>\r\n                            <div className='name'>CCI (14)</div>\r\n                            <div className='value'>{summary.indicators.CCI14.v}</div>\r\n                            <div className={`action ${colorAction(summary.indicators.CCI14.s)}`}>{summary.indicators.CCI14.s}</div>\r\n                        </div>\r\n                        <div className = 'indicator'>\r\n                            <div className='name'>MACD (12, 26)</div>\r\n                            <div className='value'>{summary.indicators.MACD12_26.v}</div>\r\n                            <div className={`action ${colorAction(summary.indicators.MACD12_26.s)}`}>{summary.indicators.MACD12_26.s}</div>\r\n                        </div>\r\n                        <div className = 'indicator'>\r\n                            <div className='name'>Rate of Change</div>\r\n                            <div className='value'>{summary.indicators.ROC.v}</div>\r\n                            <div className={`action ${colorAction(summary.indicators.ROC.s)}`}>{summary.indicators.ROC.s}</div>\r\n                        </div>\r\n                        <div className = 'indicator'>\r\n                            <div className='name'>Stochastic (9, 6)</div>\r\n                            <div className='value'>{summary.indicators.STOCH9_6.v}</div>\r\n                            <div className={`action ${colorAction(summary.indicators.STOCH9_6.s)}`}>{summary.indicators.STOCH9_6.s}</div>\r\n                        </div>\r\n                        <div className = 'indicator'>\r\n                            <div className='name'>Stochastic RSI (14)</div>\r\n                            <div className='value'>{summary.indicators.STOCHRSI14.v}</div>\r\n                            <div className={`action ${colorAction(summary.indicators.STOCHRSI14.s)}`}>{summary.indicators.STOCHRSI14.s}</div>\r\n                        </div>\r\n                        <div className = 'indicator'>\r\n                            <div className='name'>Ultimate Oscillator</div>\r\n                            <div className='value'>{summary.indicators.UltimateOscillator.v}</div>\r\n                            <div className={`action ${colorAction(summary.indicators.UltimateOscillator.s)}`}>{summary.indicators.UltimateOscillator.s}</div>\r\n                        </div>\r\n                        <div className = 'indicator'>\r\n                            <div className='name'>WilliamsR</div>\r\n                            <div className='value'>{summary.indicators.WilliamsR.v}</div>\r\n                            <div className={`action ${colorAction(summary.indicators.WilliamsR.s)}`}>{summary.indicators.WilliamsR.s}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\nexport default FXSignals","import React, { useState, useEffect } from 'react';\r\nimport '../sass/FXLatestPrice.scss'\r\nimport FXChart from './FXChart'\r\nimport FXSignals from './FXSignals'\r\n\r\nconst FXLatestPrice = () => {\r\n    const pairs = ('EUR/USD,AUD/NZD,EUR/GBP,AUD/CAD,CHF/JPY,USD/JPY,GBP/USD,AUD/USD,USD/CAD,USD/CHF,NZD/USD');\r\n    const [latestPrices, setLatestPrices] = useState(null)\r\n    const [pair, setPair] = useState('EUR/USD')\r\n\r\n    const fetchFXLatestPriceAPI = () => {\r\n        const API = `https://fcsapi.com/api-v2/forex/latest?symbol=${pairs}&access_key=32wsOaXpTRGNGkWDStdRRt0t6csigLrH5FV4qZjHe2cWljQy2E`\r\n        const tempData = []\r\n\r\n        setLatestPrices(null)\r\n\r\n        fetch(API)\r\n        .then(results => results.json())\r\n        .then(\r\n            (results) => {\r\n                if(!(results['response'] === undefined)) {\r\n                    results['response'].map(data => tempData.push(data))\r\n                    setLatestPrices(tempData)\r\n                    }\r\n                },\r\n            (error) => {\r\n                console.log(error)\r\n            }\r\n            )\r\n    }\r\n\r\n    useEffect(() => fetchFXLatestPriceAPI(), [])\r\n\r\n    const handleOnClick = (event) => {\r\n        setPair(event.currentTarget.textContent.split(' ')[1])\r\n    }\r\n\r\n    return (\r\n        <div className='container'>\r\n            \r\n            {latestPrices && <div className = 'FXLatestPriceComponent'>\r\n                <div className = 'Header'>\r\n                    <h3> Symbol </h3>\r\n                    <h3> Price </h3>\r\n                    <h3> Change </h3>\r\n                </div>\r\n                <div className = 'latestPriceContainer'>\r\n                    {latestPrices.map(({id,symbol,price,change,chg_per}) => (\r\n                        <div className = {`latestPrice ${symbol === pair ? 'active' : ''}`} key={id} onClick = {handleOnClick}>\r\n                            <div className = 'symbol'> {symbol} </div>\r\n                            <div className = 'price'> {price} </div>\r\n                            <div className = 'change'>\r\n                                <div className = {change>0 ? 'positive' : 'negative'}> {change} </div>\r\n                                <div className = {change>0 ? 'positive' : 'negative'}> {chg_per} </div>\r\n                            </div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>}\r\n            \r\n            \r\n            <div id='signal' className = 'FXSignalChartComponent'>\r\n                <FXSignals pair={pair}></FXSignals>\r\n                <FXChart pair={pair}></FXChart>\r\n            </div>\r\n        </div>\r\n        )\r\n}\r\n\r\nexport default FXLatestPrice","import React from 'react';\nimport FXLatestPrice from './FXChart/FXLatestPrice'\nimport './sass/App.scss'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header> FX Daily Forecast</header>\n      <FXLatestPrice/>\n      <footer>\n        <small>\n          Disclaimer:\n          Prices, Market trends and signals are not designed for trading purpose, These signals are only for education or non-commercial purpose use. Data contained in this application/website is not necessarily real-time nor accurate and so prices may not be accurate and may differ from the actual market price, meaning prices are indicative and not appropriate for trading purposes. Therefore we doesn`t bear any responsibility for any trading losses you might incur as a result of using this data.\n        </small>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}